(ns writisan-client.util.pipeline)
defpipeline
(require '[writisan-client.util.pipeline])
(in-ns 'writisan-client.util.pipeline)
defpipeline
(macroexpand '(defpipeline aa [pipeline app-db] (when pipeline (println pipeline))))
(macroexpand '(defpipeline aa [pipeline app-db] (when pipeline (println pipeline)) (when pipeline (println app-db))))
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin (foo))))
(macroexpand '(pipeline-> (begin `(foo))))
(require '[writisan-client.util.pipeline])
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin `(foo))))
(use '[clojure.tools.namespace.repl :only (refresh)])
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin `(foo))))
(require '[writisan-client.util.pipeline] :reload-all)
(macroexpand '(pipeline-> (begin `(foo))))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin `(foo))))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin `(foo))))
(macroexpand '(pipeline-> (begin (foo))))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin (foo))))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin (foo))))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin (foo))))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin (foo))))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin (foo))))
(macroexpand '(pipeline-> (begin (foo)) (rescue bar))
)
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin (foo)) (rescue bar)))
(macroexpand '(pipeline-> (begin [pipeline app-db] (foo)) (rescue [error] bar)))
(macroexpand '(pipeline-> 
 (pp/begin [value app-db]
           (when (empty? (trim value))
             (error! {:type :validation :msg  "can't be empty"}))
           (commit! (insert-document app-db {} {:is-saving? true}))
           (save-document value (token app-db))
           (commit! (insert-document app-db value {}))
           (redirect! {:page "comments" (:hash value)}))
            
 (pp/rescue [error]
            (if (= (:type error) :validation)
              (commit! (insert-document app-db {} {:error (:msg error)}))))))
              (commit! (insert-document app-db {} {:error (:msg error)})))))
(macroexpand '(pipeline-> (begin [pipeline app-db] (foo)) (rescue [error] bar)))
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] bar)))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] bar)))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] bar)))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] bar)))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] bar)))
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] bar)) (foo))
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] bar))))
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] bar)))
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] bar) (foo)))
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] bar)))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] bar)))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] bar)))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] bar)))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] bar)))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] bar)))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] (bar))))
(require '[writisan-client.util.pipeline] :reload-all)
(in-ns 'writisan-client.util.pipeline)
(macroexpand '(pipeline-> (begin [value app-db] (foo)) (rescue [error value app-db] (bar))))
